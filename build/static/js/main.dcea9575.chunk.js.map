{"version":3,"sources":["images/placeholder-user.png","components/Layout/Layout.js","components/Users/Users.js","components/User/User.js","components/NewUser/NewUser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Layout","_ref","children","react_default","a","createElement","className","Link","to","Users","react_apollo_browser_umd","query","gql","_templateObject","loading","error","data","key","map","_ref2","id","ID","name","Login","concat","DELETE_USER","User_templateObject","User","props","_templateObject2","match","params","userId","fetchPolicy","imageSrc","AvatarURL","placeholderUser","src","alt","mutation","deleteUser","success","DeleteUser","Redirect","onClick","variables","disabled","NewUser","NewUser_templateObject","createUser","login","avatarURL","CreateUser","onSubmit","e","preventDefault","value","type","ref","node","client","ApolloClient","uri","App","BrowserRouter","components_Layout_Layout","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcea9575.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder-user.adc3e83e.png\";","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nimport './Layout.css';\n\nconst Layout = ({ children }) => (\n  <div className=\"layout\">\n    <nav className=\"navigation\">\n      <Link className=\"navigation__link\" to='/'> Home </Link>|\n      <Link className=\"navigation__link\" to='/new'> New User </Link>\n    </nav>\n    { children }\n  </div>\n);\n\nexport default Layout;","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport './Users.css';\n\nconst Users = () => (\n  <Query\n    query={gql`\n      query {\n        Users {\n          ID\n          Login\n          AvatarURL\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n      return (\n        <ul className=\"users\" key='Users'>\n          {data.Users.map(({ ID:id, Login:name }) => (\n            <li className=\"users__item\" key={id}>\n              <Link className=\"users__item-link\" to={`/user/${id}`}>\n                {name ? name : 'Incognoito'}\n                </Link>\n            </li>\n          ))}\n        </ul>\n      );\n    }}\n  </Query>\n);\n\nexport default Users;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport placeholderUser from '../../images/placeholder-user.png';\n\nimport './User.css';\n\nconst DELETE_USER = gql`\n  mutation deleteUser($id: ID!){\n    DeleteUser(id: $id) {\n      ID\n    }\n  }\n`;\n\nconst User = (props) => (\n  <Query\n    query={gql`\n      query {\n        User(id: \"${props.match.params.userId}\") {\n          ID\n          Login\n          AvatarURL\n        }\n      }\n   `}\n    fetchPolicy='network-only'\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n\n      let imageSrc = data.User.AvatarURL;\n      if (!imageSrc) {\n        imageSrc = placeholderUser;\n      }\n\n      return (\n        <div className=\"user\">\n          <img className=\"user__avatar\" src={imageSrc} alt=\"Avatar\" />\n          <div className=\"user__login\">{data.User.Login}</div>\n          <br />\n          <Mutation mutation={DELETE_USER}>\n            {(deleteUser, { loading, error, data:success }) => {\n              if (success && success.DeleteUser && success.DeleteUser.ID) {\n                return <Redirect to=\"/\" />\n              }\n              return (\n                <button\n                  className=\"user__delete-button\"\n                  onClick={() => deleteUser({ variables: { id: data.User.ID } })}\n                  disabled={loading}\n                >\n                  {loading ? 'Deleting...' : 'Delete' }\n                </button>\n              )\n            }}\n          </Mutation>\n        </div>\n      );\n    }}\n  </Query>\n);\n\nexport default User;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport './NewUser.css';\n\nconst NewUser = () => (\n  <Mutation\n    mutation={gql`\n      mutation createUser($login: String!, $avatarURL: String){\n        CreateUser(input: {Login: $login, AvatarURL: $avatarURL}) {\n          ID\n        }\n      }\n    `}\n  >\n    {(createUser, { loading, error, data }) => {\n      let login, avatarURL;\n\n      if (data && data.CreateUser && data.CreateUser.ID) {\n        return <Redirect to={`/user/${data.CreateUser.ID}`} />\n      }\n\n      return (\n        <form className=\"new-user\" onSubmit={e => {\n          e.preventDefault();\n          createUser({ variables: {\n              login: login.value ,\n              avatarURL: avatarURL.value ,\n            }});\n        }}>\n          <div className=\"new-user__title\">\n            New User\n          </div>\n          <label className=\"new-user__label\">Login:</label>\n          <input\n            type='text'\n            ref={ node => login = node }\n          />\n          <br/>\n          <label className=\"new-user__label\">Avatar URL:</label>\n          <input\n            type='text'\n            ref={ node => avatarURL = node }\n          />\n          <br/>\n          <button\n            className=\"new-user__create-button\"\n            type='submit'\n            disabled={loading}\n          >\n            { loading ? 'Creating...' : 'Create new User' }\n          </button>\n          { error ? 'Something is wrong...' : '' }\n        </form>\n      );\n    }}\n  </Mutation>\n);\n\nexport default NewUser;","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport Layout from './components/Layout/Layout';\nimport Users from './components/Users/Users';\nimport User from './components/User/User';\nimport NewUser from './components/NewUser/NewUser';\n\nconst client = new ApolloClient({\n  uri: 'https://c3interview.danshin.pro/graphql',\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <BrowserRouter>\n      <Layout>\n        <Switch>\n          <Route exact path='/' component={ Users } />\n          <Route exact path='/user/:userId' component={ User } />\n          <Route exact path='/new' component={ NewUser } />\n        </Switch>\n      </Layout>\n    </BrowserRouter>\n  </ApolloProvider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}